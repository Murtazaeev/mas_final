package mas.project.dto;


import lombok.AllArgsConstructor;
import lombok.Data;

import java.util.UUID;

@Data
@AllArgsConstructor
public class CustomerDetailsDTO {
    private UUID id;
    private String email;
    private String name;
    private String surname;
}

package mas.project.expception;

public class ModelValidationException extends RuntimeException{
    public ModelValidationException(String message) {
        super(message);
    }
}

package mas.project.model.enumeration;

public enum OrderState {
    IN_REALIZATION,
    WAITING_FOR_SUPPLY,
    CANCELED,
    COMPLETED,
    ARCHIVED
}

package mas.project.model.enumeration;

public enum WorkingDays {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday
}

package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Embeddable;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Embeddable
public class Address {

    @NotBlank
    @Size(max = 50)
    private String street;

    @NotBlank
    @Size(max = 10)
    private String buildingNumber;

    @NotBlank
    @Size(max = 50)
    private String city;

}

package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "author")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Author {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;

    @NotBlank
    @Size(max = 80)
    private String surname;

    @NotBlank
    @Size(max = 1000)
    private String biography;

    @NotNull
    private Date birthDate;

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinTable(name="author_book",
            joinColumns=@JoinColumn(name="book_id"),
            inverseJoinColumns=@JoinColumn(name="author_id")
    )
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Book> books = new HashSet<>();

}

package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "book")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Book {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    private String title;

    @NotNull
    private Date publishDate;

    @NotNull
    @Min(1)
    private int numberOfPages;

    @NotBlank
    private String category;

    @NotNull
    @Min(0)
    private Double price;

    @OneToOne(mappedBy = "book")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private OrderItem orderItem;

    @OneToOne(mappedBy = "book", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Stock stock;

    @ManyToOne(optional = false)
    @JoinColumn(name = "publisher_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Publisher publisher;

    @ManyToMany(mappedBy = "books")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Author> authors = new HashSet<>();
}

package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "customer")
@NoArgsConstructor
@AllArgsConstructor

public class Customer{

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Address address;

    @NotBlank
    @Size(min = 3, max = 30)
    private String email;

    @JsonBackReference
    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private User user;

    @OneToMany(mappedBy = "customer")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<LoyaltyCard> loyaltyCards = new HashSet<>();

    @JsonBackReference
    @OneToMany(mappedBy = "customer")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Order> orders = new HashSet<>();
}

package mas.project.model;

import com.sun.istack.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import java.util.Date;
import java.util.UUID;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Employee {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(0)
    private Double salary;

    @NotNull
    private Date workFromDate;

}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.GenericGenerator;
import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.UUID;
@Data
@Entity(name = "invoice")
@NoArgsConstructor(force = true)
public class Invoice {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(0)
    @Max(100)
    private Double taxRateInPercentage;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity) FROM order_item oi, book b, orders o WHERE o.id = order_id AND oi.order_id = o.id AND oi.book_id = b.id)")
    private Double nettoPrice;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity)*tax_rate_in_percentage*0.01+SUM(b.price*oi.quantity) FROM order_item oi, book b, orders o WHERE o.id = order_id AND oi.order_id = o.id AND oi.book_id = b.id)")
    private Double bruttoPrice;

    @JsonBackReference
    @OneToOne(optional = false)
    @JoinColumn(name = "order_id", nullable = false, updatable = false)
    private Order order;


}


package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.UUID;

@Data
@Entity(name = "loyaltyCard")
@NoArgsConstructor
@AllArgsConstructor
public class LoyaltyCard {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Column(unique = true)
    @Size(min = 1, max = 80)
    private String cardName;

    @NotNull
    private Double priceReductionInPercentage;

    @ManyToOne(optional = false)
    @JoinColumn(name = "customer_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;


}

package mas.project.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.OneToOne;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

@Data
@Entity(name = "manager")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@NoArgsConstructor(force = true)
public class Manager extends Employee{

    @NotBlank
    private String qualification;

    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    private User user;

}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.*;
import mas.project.model.enumeration.OrderState;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.sql.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "orders")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Order {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Date orderDate;

    @NotNull
    private OrderState orderState;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity) FROM order_item oi, book b WHERE oi.order_id = id AND oi.book_id = b.id)")
    private double retailPrice;

    @JsonManagedReference
    @ManyToOne(optional = false)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;

    @JsonBackReference
    @OneToMany(mappedBy = "order")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<OrderItem> orderItems = new HashSet<>();

    @JsonManagedReference
    @OneToOne(mappedBy = "order", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Invoice invoice;

    //@Formula("(SELECT SUM(order_item.quantity*book.price) FROM order_item, book, orders WHERE order_item.order_id = orders.id AND book.id = order_item.book_id)")
    //private Double retailPrice;

    //  @Formula("(SELECT SUM(CAST(oi.quantity as DOUBLE PRECISION)* b.price) FROM order_item oi, book b WHERE oi.order_id = id AND oi.book_id = b.id)")
    // private double retailPrice;

    public boolean canGetInvoice(OrderState orderState){
        OrderState currentOrderState = getOrderState();
        if(currentOrderState == OrderState.WAITING_FOR_SUPPLY || currentOrderState == OrderState.CANCELED ){
            return false;
        }
        return true;
    }

}

package mas.project.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "orderItem")
@NoArgsConstructor(force = true)
@AllArgsConstructor
@Table(uniqueConstraints = {
                @UniqueConstraint(columnNames={"book_id", "order_id"})}
)
public class OrderItem {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(1)
    private int quantity;

    @JsonManagedReference
    @ManyToOne(optional = false)
    @JoinColumn(name = "order_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Order order;

    @OneToMany(mappedBy = "orderItem")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrderDetails> supplyOrderDetails = new HashSet<>();

    @OneToOne(optional = false)
    @JoinColumn(name = "book_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Book book;

}

package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "publisher")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Publisher {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;

    @NotNull
    private Address address;

    @NotBlank
    @Size(min = 6, max = 14)
    private String phone;

    @OneToMany(mappedBy = "publisher")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Book> books = new HashSet<>();


}

package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import mas.project.model.enumeration.WorkingDays;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Data
@Entity(name = "salesman")
@NoArgsConstructor
@AllArgsConstructor
public class Salesman extends Employee{

    @NotNull
    private WorkingDays workingDays;

    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    private User user;

    @OneToMany(mappedBy = "salesman")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrder> supplyOrders = new HashSet<>();

}



package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.UUID;

@Entity(name = "stock")
public class Stock {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(1)
    private int quantity;

    @OneToOne(optional = false)
    @JoinColumn(name = "book_id", nullable = false, updatable = false)
    private Book book;
}


package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "supplyOrder")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class SupplyOrder {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Date orderDate;

    @OneToMany(mappedBy = "supplyOrder", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrderDetails> supplyOrderDetails = new HashSet<>();

    @ManyToOne(optional = false)
    @JoinColumn(name = "salesman_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Salesman salesman;

}


package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.util.Date;
import java.util.UUID;

@Data
@Entity(name = "supplyOrderDetails")
@NoArgsConstructor(force = true)
@AllArgsConstructor
@Table(uniqueConstraints = {
        @UniqueConstraint(columnNames = {"order_item_id", "supply_order_id"})
})
public class SupplyOrderDetails {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    private Date predictOrderExecutionDate;

    private String specialRequirements;

    @ManyToOne(optional = false)
    @JoinColumn(name = "order_item_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private OrderItem orderItem;

    @ManyToOne(optional = false)
    @JoinColumn(name = "supply_order_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private SupplyOrder supplyOrder;

}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;
import mas.project.expception.ModelValidationException;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.UUID;

@Data
@Entity(name = "users")
@NoArgsConstructor(force = true)
public class User {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;
    @NotBlank
    @Size(max = 100)
    private String surname;
    @NotBlank
    @Size(max = 30)
    private String nickname;
    @NotBlank
    @Size(max = 128)
    private String password;

    @Size(max = 1000)
    private String description;

    @JsonManagedReference
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "manager_id", referencedColumnName = "id")
    @ToString.Exclude
    private Manager manager;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "salesman_id", referencedColumnName = "id")
    @ToString.Exclude
    private Salesman salesman;

    public void setCustomer(Customer customer) {
        if(getCustomer() != null){
            throw new ModelValidationException("Customer already set!");
        } else {
            this.customer = customer;
        }
    }

    public void setSalesman(Salesman salesman) {
        if(getSalesman() != null){
            throw new ModelValidationException("Salesman already set!");
        }
        if(getManager() != null){
            throw new ModelValidationException("Manager cannot be a salesman in the same time!");
        }
        this.salesman = salesman;
    }

    public void setManager(Manager manager) {
        if(getManager() != null){
            throw new ModelValidationException("Manager already set!");
        }
        if(getSalesman() != null){
            throw new ModelValidationException("Manager cannot be a salesman in the same time!");
        }
        this.manager = manager;
    }
}


package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class WebUser {

}

package mas.project.repository;

import mas.project.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface BookRepository extends JpaRepository<Book, UUID> {
}


package mas.project.repository;

import mas.project.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.UUID;

public interface CustomerRepository extends JpaRepository<Customer, UUID> {
    @Query("from customer u")
    List<Customer> getAllCustomers();
}


package mas.project.repository;

import mas.project.model.Invoice;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.UUID;

public interface InvoiceRepository extends JpaRepository<Invoice, UUID> {

    @Query("from invoice as i left join fetch i.order where i.order.id = :id")
    Invoice findInvoiceByOrderId(@Param("id") UUID id);

}


package mas.project.repository;

import mas.project.model.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface OrderItemRepository extends JpaRepository<OrderItem, UUID> {
}


package mas.project.repository;

import mas.project.model.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.UUID;

public interface OrderRepository extends JpaRepository<Order, UUID> {

    @Query("from orders as o join fetch o.customer where o.customer.id = :cusId order by o.orderDate desc")
    List<Order> findCustomerOrdersByCustomerId(@Param("cusId") UUID cusId);

    @Query("from orders as o where o.id = :orderId ")
    Order findOrderById(@Param("orderId") UUID orderId);

}


package mas.project.repository;

import mas.project.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.UUID;

public interface UserRepository extends JpaRepository<User, UUID> {

    @Query("from users as u left join fetch u.customer where u.customer.id = :id")
    User getCustomerUserDetails(@Param("id") UUID id);

}

package mas.project.service;


import mas.project.dto.CustomerDetailsDTO;
import mas.project.model.Customer;
import mas.project.model.User;
import mas.project.repository.CustomerRepository;
import mas.project.repository.UserRepository;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final UserRepository userRepository;


    public CustomerService(CustomerRepository customerRepository, UserRepository userRepository) {
        this.customerRepository = customerRepository;
        this.userRepository = userRepository;
    }
    @Transactional
    public List<CustomerDetailsDTO> getAllCustomerDetails() {
        List<Customer> customers = customerRepository.findAll();
        return customers.stream().map(customer -> new CustomerDetailsDTO(
                customer.getId(),
                customer.getEmail(),
                customer.getUser().getName(),
                customer.getUser().getSurname()
        )).collect(Collectors.toList());
    }
    @Transactional
    public CustomerDetailsDTO getCustomerDetails(UUID customerId) {
        return customerRepository.findById(customerId)
                .map(customer -> new CustomerDetailsDTO(
                        customer.getId(),
                        customer.getEmail(),
                        customer.getUser().getName(),
                        customer.getUser().getSurname()))

                .orElse(null);
    }

    @Transactional
    public Customer getCustomer(UUID id) {
        return customerRepository.findById(id).get();
    }
}



package mas.project.service;

import lombok.RequiredArgsConstructor;
import mas.project.model.Invoice;
import mas.project.repository.InvoiceRepository;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class InvoiceService {

    private final InvoiceRepository invoiceRepository;

    public Invoice getInvoiceByOrderId(UUID orderId){
        var invoice = invoiceRepository.findInvoiceByOrderId(orderId);
        if(invoice != null){
            if(invoice.getOrder().canGetInvoice(invoice.getOrder().getOrderState())){
                return invoice;
            }
        }
        return null;
    }

}

package mas.project.service;

import lombok.RequiredArgsConstructor;
import mas.project.model.Order;
import mas.project.model.enumeration.OrderState;
import mas.project.repository.OrderRepository;
import org.aspectj.weaver.ast.Or;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;

    public List<Order>  getCustomerOrdersByCustomerId(UUID id){
        return orderRepository.findCustomerOrdersByCustomerId(id);
    }

    public Order getOrderByOrderId(UUID id){
        return orderRepository.findOrderById(id);
    }

    public OrderState getOrderStatus(UUID id){
        var order = orderRepository.findOrderById(id);
        return order.getOrderState();
    }

    public boolean canGetInvoice(UUID id){
        OrderState currentOrderState = getOrderStatus(id);
        if(currentOrderState == OrderState.WAITING_FOR_SUPPLY || currentOrderState == OrderState.CANCELED ){
            return false;
        }
        return true;
    }
 //   public List<Order>  getCustomerOrdersByCustomerIdTrue(String customerStringUUID){
 //       return orderRepository.findCustomerOrdersByCustomerId(customerStringUUID);
 //   }

}


package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.dto.CustomerDetailsDTO;
import mas.project.model.Customer;
import mas.project.model.User;
import mas.project.service.CustomerService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/customer")
@Data
@Slf4j

public class CustomerController {

    private CustomerService service;

    public CustomerController(CustomerService customerService){
        this.service = customerService;
    }

    @GetMapping("/userDetails/{customerId}")
    public ResponseEntity<CustomerDetailsDTO> getCustomerUserDetails(@PathVariable UUID customerId) {
        CustomerDetailsDTO userDetails = service.getCustomerDetails(customerId);
        if (userDetails == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(userDetails);
    }

    @GetMapping("/getAllCustomers")
    public ResponseEntity<List<CustomerDetailsDTO>> getAllCustomers() {
        List<CustomerDetailsDTO> customers = service.getAllCustomerDetails();
        if (customers.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(customers);
    }
}


package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.model.Invoice;
import mas.project.service.InvoiceService;
import mas.project.service.OrderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/invoice")
@Data
@Slf4j
public class InvoiceController {

    private InvoiceService invoiceService;
    private OrderService orderService;

    public InvoiceController(InvoiceService invoiceService, OrderService orderService){
        this.invoiceService = invoiceService;
        this.orderService = orderService;
    }

    @GetMapping("/{orderId}")
    public ResponseEntity<Invoice> getInvoiceByOrderId(@PathVariable UUID orderId){
        var invoice = invoiceService.getInvoiceByOrderId(orderId);
        if(invoice == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(invoice, HttpStatus.OK);
    }

}


package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.model.Order;
import mas.project.model.User;
import mas.project.service.OrderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/order")
@Data
@Slf4j
public class OrderController {

    private OrderService orderService;

    public OrderController(OrderService orderService){
        this.orderService = orderService;
    }

    @GetMapping("/customerOrders/{customerId}")
    public ResponseEntity<List<Order>> getCustomerUserDetails(@PathVariable UUID customerId){
        var customerOrders = orderService.getCustomerOrdersByCustomerId(customerId);
        if(customerOrders.size() < 1){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(customerOrders, HttpStatus.OK);
    }

    @GetMapping("/orderDetails/{orderId}")
    public ResponseEntity<Order> getOrderDetails(@PathVariable UUID orderId){
        var order = orderService.getOrderByOrderId(orderId);
        if(order == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(order, HttpStatus.OK);
    }

}


package mas.project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class ProjectApplication {

    public static void main(String[] args) {
        SpringApplication.run(ProjectApplication.class, args);
    }

}


--Customers
INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf9c', 'alisher@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Alisher', 'Qodirov', '42d6a42c-40c8-424d-9e3c-6bef049aaf9c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf8c', 'javlon@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Javlon', 'Qochqorov', '42d6a42c-40c8-424d-9e3c-6bef049aaf8c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf7c', 'rustam@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Rustam', 'Orozov', '42d6a42c-40c8-424d-9e3c-6bef049aaf7c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf6c', 'temur@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Temur', 'Murtazaev', '42d6a42c-40c8-424d-9e3c-6bef049aaf6c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf5c', 'ulugbek@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Ulugbek', 'Shakirov', '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf4c', 'tom@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Tom', 'Cruise', '42d6a42c-40c8-424d-9e3c-6bef049aaf4c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf3c', 'emil@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Emil', 'Wcislo', '42d6a42c-40c8-424d-9e3c-6bef049aaf3c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf2c', 'mathew@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Mathew', 'Perry', '42d6a42c-40c8-424d-9e3c-6bef049aaf2c');

--Orders
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d87', TO_DATE('2024-01-16','YYYY-MM-DD'), 1,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d86', TO_DATE('2024-01-17','YYYY-MM-DD'), 0,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d85', TO_DATE('2024-01-13','YYYY-MM-DD'), 0,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d84', TO_DATE('2024-01-19','YYYY-MM-DD'), 3,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d83', TO_DATE('2024-01-20','YYYY-MM-DD'), 0,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');

--Create some book
INSERT INTO publisher (id, name, phone) VALUES ('bd90362e-fddb-457d-9a1e-e191def365d2', 'publisherName', '+48792682164');
INSERT INTO book(id, category, number_of_pages, price, publish_date, title, publisher_id) VALUES(
                                                                                                    '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'Science', 375, 75, TO_DATE('2024-01-20','YYYY-MM-DD'), 'Cracking Coding Interview', 'bd90362e-fddb-457d-9a1e-e191def365d2');

--Order items
ALTER TABLE order_item DROP CONSTRAINT uk_f67xlaxtwr6wwab7u7mxndi5s;

INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d87');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d86');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d85');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d84');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d83');

--Creating invoice
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d87');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, 'b8e45205-d417-45d7-a04f-303266954d86');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d85');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, 'b8e45205-d417-45d7-a04f-303266954d84');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d83');

