I have springboot project about bookshop.

and my file structure is like that:

project (package)
        dto (package)
                CustomerDetailsDTO.java
        exception (package)
                ModelValidationException.java
        model (package)
                enumeration (package )
                        OrderState (enum)
                        WorkingDays (enum)
                Address.java
                Author.java
                Book.java
                Customer.java
                Employee.java
                Invoice.java
                LoyalityCard.java
                Manager.java
                Order.java
                OrderItem.java
                Publisher.java
                Salesman.java
                Stock.java
                SupplyOrder.java
                SupplyOrderDetails.java
                User.java
                WebUser.java
        repository (package)
                BookRepository (interface)
                CustomerRepository (interface)
                InvoiceRepository (interface)
                OrderItemRepository (interface)
                OrderRepository (interface)
                UserRepository (interface)
        service (package)
                CustomerService.java
                InvoiceService.java
                OrderService.java
        web (package)
                controller (package)
                        CutomerController.java
                        InvoiceController.java
                        OrderController.java
        ProjectApplication.java (main class)

package mas.project.dto;


import lombok.*;

import java.util.UUID;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Setter
@Getter
public class CustomerDetailsDTO {
    private UUID id;
    private String email;
    private String name;
    private String surname;
}


package mas.project.expception;

public class ModelValidationException extends RuntimeException{
    public ModelValidationException(String message) {
        super(message);
    }
}

package mas.project.model.enumeration;

public enum OrderState {
    IN_REALIZATION,
    WAITING_FOR_SUPPLY,
    CANCELED,
    COMPLETED,
    ARCHIVED
}

package mas.project.model.enumeration;

public enum WorkingDays {
    Monday,
    Tuesday,
    Wednesday,
    Thursday,
    Friday
}


package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

import javax.persistence.Embeddable;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

@Data
@AllArgsConstructor
@NoArgsConstructor
@Embeddable
public class Address {

    @NotBlank
    @Size(max = 50)
    private String street;

    @NotBlank
    @Size(max = 10)
    private String buildingNumber;

    @NotBlank
    @Size(max = 50)
    private String city;

}


package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "author")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Author {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;

    @NotBlank
    @Size(max = 80)
    private String surname;

    @NotBlank
    @Size(max = 1000)
    private String biography;

    @NotNull
    private Date birthDate;

    @ManyToMany(cascade = {CascadeType.PERSIST, CascadeType.MERGE})
    @JoinTable(name="author_book",
            joinColumns=@JoinColumn(name="book_id"),
            inverseJoinColumns=@JoinColumn(name="author_id")
    )
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Book> books = new HashSet<>();

}


package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "book")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Book {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    private String title;

    @NotNull
    private Date publishDate;

    @NotNull
    @Min(1)
    private int numberOfPages;

    @NotBlank
    private String category;

    @NotNull
    @Min(0)
    private Double price;

    @OneToOne(mappedBy = "book")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private OrderItem orderItem;

    @OneToOne(mappedBy = "book", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Stock stock;

    @ManyToOne(optional = false)
    @JoinColumn(name = "publisher_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Publisher publisher;

    @ManyToMany(mappedBy = "books")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Author> authors = new HashSet<>();
}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "customer")
@NoArgsConstructor
@AllArgsConstructor

public class Customer{

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Address address;

    @NotBlank
    @Size(min = 3, max = 30)
    private String email;

    @JsonBackReference
    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private User user;

    @OneToMany(mappedBy = "customer")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<LoyaltyCard> loyaltyCards = new HashSet<>();

    @JsonBackReference
    @OneToMany(mappedBy = "customer")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Order> orders = new HashSet<>();
}


package mas.project.model;

import com.sun.istack.NotNull;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.experimental.SuperBuilder;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import java.util.Date;
import java.util.UUID;

@Entity
@Data
@NoArgsConstructor
@AllArgsConstructor
@SuperBuilder
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
public abstract class Employee {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(0)
    private Double salary;

    @NotNull
    private Date workFromDate;

}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import lombok.Data;
import lombok.NoArgsConstructor;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.GenericGenerator;
import javax.persistence.*;
import javax.validation.constraints.Max;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.UUID;
@Data
@Entity(name = "invoice")
@NoArgsConstructor(force = true)
public class Invoice {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(0)
    @Max(100)
    private Double taxRateInPercentage;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity) FROM order_item oi, book b, orders o WHERE o.id = order_id AND oi.order_id = o.id AND oi.book_id = b.id)")
    private Double nettoPrice;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity)*tax_rate_in_percentage*0.01+SUM(b.price*oi.quantity) FROM order_item oi, book b, orders o WHERE o.id = order_id AND oi.order_id = o.id AND oi.book_id = b.id)")
    private Double bruttoPrice;

    @JsonBackReference
    @OneToOne(optional = false)
    @JoinColumn(name = "order_id", nullable = false, updatable = false)
    private Order order;


}



package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.UUID;

@Data
@Entity(name = "loyaltyCard")
@NoArgsConstructor
@AllArgsConstructor
public class LoyaltyCard {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Column(unique = true)
    @Size(min = 1, max = 80)
    private String cardName;

    @NotNull
    private Double priceReductionInPercentage;

    @ManyToOne(optional = false)
    @JoinColumn(name = "customer_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;


}



package mas.project.model;

import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;

import javax.persistence.Entity;
import javax.persistence.Inheritance;
import javax.persistence.InheritanceType;
import javax.persistence.OneToOne;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;

@Data
@Entity(name = "manager")
@Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)
@NoArgsConstructor(force = true)
public class Manager extends Employee{

    @NotBlank
    private String qualification;

    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    private User user;

}


package mas.project.model;

import com.fasterxml.jackson.annotation.JsonBackReference;
import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.*;
import mas.project.model.enumeration.OrderState;
import org.hibernate.annotations.Formula;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotNull;
import java.sql.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "orders")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Order {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Date orderDate;

    @NotNull
    private OrderState orderState;

    @Formula(value = "(SELECT SUM(b.price*oi.quantity) FROM order_item oi, book b WHERE oi.order_id = id AND oi.book_id = b.id)")
    private double retailPrice;

    @JsonManagedReference
    @ManyToOne(optional = false)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;

    @JsonBackReference
    @OneToMany(mappedBy = "order")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<OrderItem> orderItems = new HashSet<>();

    @JsonManagedReference
    @OneToOne(mappedBy = "order", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Invoice invoice;

    //@Formula("(SELECT SUM(order_item.quantity*book.price) FROM order_item, book, orders WHERE order_item.order_id = orders.id AND book.id = order_item.book_id)")
    //private Double retailPrice;

    //  @Formula("(SELECT SUM(CAST(oi.quantity as DOUBLE PRECISION)* b.price) FROM order_item oi, book b WHERE oi.order_id = id AND oi.book_id = b.id)")
    // private double retailPrice;

    public boolean canGetInvoice(OrderState orderState){
        OrderState currentOrderState = getOrderState();
        if(currentOrderState == OrderState.WAITING_FOR_SUPPLY || currentOrderState == OrderState.CANCELED ){
            return false;
        }
        return true;
    }

}



package mas.project.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "orderItem")
@NoArgsConstructor(force = true)
@AllArgsConstructor
@Table(uniqueConstraints = {
                @UniqueConstraint(columnNames={"book_id", "order_id"})}
)
public class OrderItem {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(1)
    private int quantity;

    @JsonManagedReference
    @ManyToOne(optional = false)
    @JoinColumn(name = "order_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Order order;

    @OneToMany(mappedBy = "orderItem")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrderDetails> supplyOrderDetails = new HashSet<>();

    @OneToOne(optional = false)
    @JoinColumn(name = "book_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Book book;

}



package mas.project.model;

import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.Entity;
import javax.persistence.GeneratedValue;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.NotNull;
import javax.validation.constraints.Size;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "publisher")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class Publisher {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;

    @NotNull
    private Address address;

    @NotBlank
    @Size(min = 6, max = 14)
    private String phone;

    @OneToMany(mappedBy = "publisher")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<Book> books = new HashSet<>();


}



package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import mas.project.model.enumeration.WorkingDays;

import javax.persistence.*;
import java.util.HashSet;
import java.util.Set;

@Data
@Entity(name = "salesman")
@NoArgsConstructor
@AllArgsConstructor
public class Salesman extends Employee{

    @NotNull
    private WorkingDays workingDays;

    @OneToOne(mappedBy = "customer", optional = false)
    @ToString.Exclude
    private User user;

    @OneToMany(mappedBy = "salesman")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrder> supplyOrders = new HashSet<>();

}



package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;
import lombok.ToString;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.Min;
import javax.validation.constraints.NotNull;
import java.util.UUID;

@Entity(name = "stock")
public class Stock {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    @Min(1)
    private int quantity;

    @OneToOne(optional = false)
    @JoinColumn(name = "book_id", nullable = false, updatable = false)
    private Book book;
}



package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import java.util.UUID;

@Data
@Entity(name = "supplyOrder")
@NoArgsConstructor(force = true)
@AllArgsConstructor
public class SupplyOrder {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotNull
    private Date orderDate;

    @OneToMany(mappedBy = "supplyOrder", cascade = CascadeType.REMOVE)
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Set<SupplyOrderDetails> supplyOrderDetails = new HashSet<>();

    @ManyToOne(optional = false)
    @JoinColumn(name = "salesman_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Salesman salesman;

}





package mas.project.model;

import com.sun.istack.NotNull;
import lombok.*;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import java.util.Date;
import java.util.UUID;

@Data
@Entity(name = "supplyOrderDetails")
@NoArgsConstructor(force = true)
@AllArgsConstructor
@Table(uniqueConstraints = {
        @UniqueConstraint(columnNames = {"order_item_id", "supply_order_id"})
})
public class SupplyOrderDetails {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    private Date predictOrderExecutionDate;

    private String specialRequirements;

    @ManyToOne(optional = false)
    @JoinColumn(name = "order_item_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private OrderItem orderItem;

    @ManyToOne(optional = false)
    @JoinColumn(name = "supply_order_id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private SupplyOrder supplyOrder;

}



package mas.project.model;

import com.fasterxml.jackson.annotation.JsonManagedReference;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.NoArgsConstructor;
import lombok.ToString;
import mas.project.expception.ModelValidationException;
import org.hibernate.annotations.GenericGenerator;

import javax.persistence.*;
import javax.validation.constraints.NotBlank;
import javax.validation.constraints.Size;
import java.util.UUID;

@Data
@Entity(name = "users")
@NoArgsConstructor(force = true)
public class User {

    @Id
    @GeneratedValue(generator = "UUID")
    @GenericGenerator(
            name = "UUID",
            strategy = "org.hibernate.id.UUIDGenerator"
    )
    private UUID id;

    @NotBlank
    @Size(max = 50)
    private String name;
    @NotBlank
    @Size(max = 100)
    private String surname;
    @NotBlank
    @Size(max = 30)
    private String nickname;
    @NotBlank
    @Size(max = 128)
    private String password;

    @Size(max = 1000)
    private String description;

    @JsonManagedReference
    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "customer_id", referencedColumnName = "id")
    @ToString.Exclude
    @EqualsAndHashCode.Exclude
    private Customer customer;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "manager_id", referencedColumnName = "id")
    @ToString.Exclude
    private Manager manager;

    @OneToOne(cascade = CascadeType.ALL)
    @JoinColumn(name = "salesman_id", referencedColumnName = "id")
    @ToString.Exclude
    private Salesman salesman;

    public void setCustomer(Customer customer) {
        if(getCustomer() != null){
            throw new ModelValidationException("Customer already set!");
        } else {
            this.customer = customer;
        }
    }

    public void setSalesman(Salesman salesman) {
        if(getSalesman() != null){
            throw new ModelValidationException("Salesman already set!");
        }
        if(getManager() != null){
            throw new ModelValidationException("Manager cannot be a salesman in the same time!");
        }
        this.salesman = salesman;
    }

    public void setManager(Manager manager) {
        if(getManager() != null){
            throw new ModelValidationException("Manager already set!");
        }
        if(getSalesman() != null){
            throw new ModelValidationException("Manager cannot be a salesman in the same time!");
        }
        this.manager = manager;
    }
}



package mas.project.model;

import lombok.AllArgsConstructor;
import lombok.Data;

@Data
@AllArgsConstructor
public class WebUser {

}


package mas.project.repository;

import mas.project.model.Book;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface BookRepository extends JpaRepository<Book, UUID> {
}


package mas.project.repository;

import mas.project.model.Customer;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;

import java.util.List;
import java.util.UUID;

public interface CustomerRepository extends JpaRepository<Customer, UUID> {
    @Query("from customer u")
    List<Customer> getAllCustomers();
}



package mas.project.repository;

import mas.project.model.Invoice;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.UUID;

public interface InvoiceRepository extends JpaRepository<Invoice, UUID> {

    @Query("from invoice as i left join fetch i.order where i.order.id = :id")
    Invoice findInvoiceByOrderId(@Param("id") UUID id);

}



package mas.project.repository;

import mas.project.model.OrderItem;
import org.springframework.data.jpa.repository.JpaRepository;

import java.util.UUID;

public interface OrderItemRepository extends JpaRepository<OrderItem, UUID> {
}



package mas.project.repository;

import mas.project.model.Order;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.List;
import java.util.UUID;

public interface OrderRepository extends JpaRepository<Order, UUID> {

    @Query("from orders as o join fetch o.customer where o.customer.id = :cusId order by o.orderDate desc")
    List<Order> findCustomerOrdersByCustomerId(@Param("cusId") UUID cusId);

    @Query("from orders as o where o.id = :orderId ")
    Order findOrderById(@Param("orderId") UUID orderId);

}



package mas.project.repository;

import mas.project.model.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.data.repository.query.Param;

import java.util.UUID;

public interface UserRepository extends JpaRepository<User, UUID> {

    @Query("from users as u left join fetch u.customer where u.customer.id = :id")
    User getCustomerUserDetails(@Param("id") UUID id);

}


package mas.project.service;


import mas.project.dto.CustomerDetailsDTO;
import mas.project.model.Customer;
import mas.project.repository.CustomerRepository;
import mas.project.repository.UserRepository;
import org.springframework.stereotype.Service;

import javax.transaction.Transactional;
import java.util.List;
import java.util.UUID;
import java.util.stream.Collectors;

@Service
public class CustomerService {

    private final CustomerRepository customerRepository;
    private final UserRepository userRepository;


    public CustomerService(CustomerRepository customerRepository, UserRepository userRepository) {
        this.customerRepository = customerRepository;
        this.userRepository = userRepository;
    }

    public List<CustomerDetailsDTO> getAllCustomerDetails() {
        List<Customer> customers = customerRepository.findAll();
        return customers.stream().map(customer -> new CustomerDetailsDTO(
                customer.getId(),
                customer.getEmail(),
                customer.getUser().getName(),
                customer.getUser().getSurname()
        )).collect(Collectors.toList());
    }

    public CustomerDetailsDTO getCustomerDetails(UUID customerId) {
        return customerRepository.findById(customerId)
                .map(customer -> new CustomerDetailsDTO(
                        customer.getId(),
                        customer.getEmail(),
                        customer.getUser().getName(),
                        customer.getUser().getSurname()))
                .orElse(null);
    }
}


package mas.project.service;

import lombok.RequiredArgsConstructor;
import mas.project.model.Invoice;
import mas.project.repository.InvoiceRepository;
import org.springframework.stereotype.Service;

import java.util.UUID;

@Service
@RequiredArgsConstructor
public class InvoiceService {

    private final InvoiceRepository invoiceRepository;

    public Invoice getInvoiceByOrderId(UUID orderId){
        var invoice = invoiceRepository.findInvoiceByOrderId(orderId);
        if(invoice != null){
            if(invoice.getOrder().canGetInvoice(invoice.getOrder().getOrderState())){
                return invoice;
            }
        }
        return null;
    }

}



package mas.project.service;

import lombok.RequiredArgsConstructor;
import mas.project.model.Order;
import mas.project.model.enumeration.OrderState;
import mas.project.repository.OrderRepository;
import org.aspectj.weaver.ast.Or;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.UUID;

@Service
@RequiredArgsConstructor
public class OrderService {

    private final OrderRepository orderRepository;

    public List<Order>  getCustomerOrdersByCustomerId(UUID id){
        return orderRepository.findCustomerOrdersByCustomerId(id);
    }

    public Order getOrderByOrderId(UUID id){
        return orderRepository.findOrderById(id);
    }

    public OrderState getOrderStatus(UUID id){
        var order = orderRepository.findOrderById(id);
        return order.getOrderState();
    }

    public boolean canGetInvoice(UUID id){
        OrderState currentOrderState = getOrderStatus(id);
        if(currentOrderState == OrderState.WAITING_FOR_SUPPLY || currentOrderState == OrderState.CANCELED ){
            return false;
        }
        return true;
    }
 //   public List<Order>  getCustomerOrdersByCustomerIdTrue(String customerStringUUID){
 //       return orderRepository.findCustomerOrdersByCustomerId(customerStringUUID);
 //   }

}



package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.dto.CustomerDetailsDTO;
import mas.project.model.Customer;
import mas.project.model.User;
import mas.project.service.CustomerService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/customer")
@Data
@Slf4j

public class CustomerController {

    private CustomerService service;

    public CustomerController(CustomerService customerService){
        this.service = customerService;
    }

    @GetMapping("/userDetails/{customerId}")
    public ResponseEntity<CustomerDetailsDTO> getCustomerUserDetails(@PathVariable UUID customerId) {
        CustomerDetailsDTO userDetails = service.getCustomerDetails(customerId);
        if (userDetails == null) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(userDetails);
    }

    @GetMapping("/getAllCustomers")
    public ResponseEntity<List<CustomerDetailsDTO>> getAllCustomers() {
        List<CustomerDetailsDTO> customers = service.getAllCustomerDetails();
        if (customers.isEmpty()) {
            return ResponseEntity.notFound().build();
        }
        return ResponseEntity.ok(customers);
    }
}



package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.model.Invoice;
import mas.project.service.InvoiceService;
import mas.project.service.OrderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/invoice")
@Data
@Slf4j
public class InvoiceController {

    private InvoiceService invoiceService;
    private OrderService orderService;

    public InvoiceController(InvoiceService invoiceService, OrderService orderService){
        this.invoiceService = invoiceService;
        this.orderService = orderService;
    }

    @GetMapping("/{orderId}")
    public ResponseEntity<Invoice> getInvoiceByOrderId(@PathVariable UUID orderId){
        var invoice = invoiceService.getInvoiceByOrderId(orderId);
        if(invoice == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(invoice, HttpStatus.OK);
    }

}


package mas.project.web.controller;

import lombok.Data;
import lombok.extern.slf4j.Slf4j;
import mas.project.model.Order;
import mas.project.model.User;
import mas.project.service.OrderService;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;
import java.util.UUID;

@RestController
@CrossOrigin(origins = "*")
@RequestMapping("/order")
@Data
@Slf4j
public class OrderController {

    private OrderService orderService;

    public OrderController(OrderService orderService){
        this.orderService = orderService;
    }

    @GetMapping("/customerOrders/{customerId}")
    public ResponseEntity<List<Order>> getCustomerUserDetails(@PathVariable UUID customerId){
        var customerOrders = orderService.getCustomerOrdersByCustomerId(customerId);
        if(customerOrders.size() < 1){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(customerOrders, HttpStatus.OK);
    }

    @GetMapping("/orderDetails/{orderId}")
    public ResponseEntity<Order> getOrderDetails(@PathVariable UUID orderId){
        var order = orderService.getOrderByOrderId(orderId);
        if(order == null){
            return new ResponseEntity<>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<>(order, HttpStatus.OK);
    }

}



package mas.project;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;



@SpringBootApplication
public class ProjectApplication {

    public static void main(String[] args) {
        SpringApplication.run(ProjectApplication.class, args);
    }

}



spring:
  datasource:
    url: jdbc:postgresql://localhost:5432/mas
    username: masUser
    password: 1234
    driver-class-name: org.postgresql.Driver

  jpa:
    generate-ddl: true
    hibernate:
      ddl-auto: create-drop
    defer-datasource-initialization: true
  sql:
    init:
      mode: always

users:
  listing:
    pageSize: 12



--Customers
INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf9c', 'alisher@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Alisher', 'Qodirov', '42d6a42c-40c8-424d-9e3c-6bef049aaf9c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf8c', 'javlon@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Javlon', 'Qochqorov', '42d6a42c-40c8-424d-9e3c-6bef049aaf8c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf7c', 'rustam@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Rustam', 'Orozov', '42d6a42c-40c8-424d-9e3c-6bef049aaf7c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf6c', 'temur@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Temur', 'Murtazaev', '42d6a42c-40c8-424d-9e3c-6bef049aaf6c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf5c', 'ulugbek@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Ulugbek', 'Shakirov', '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf4c', 'tom@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Tom', 'Cruise', '42d6a42c-40c8-424d-9e3c-6bef049aaf4c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf3c', 'emil@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Emil', 'Wcislo', '42d6a42c-40c8-424d-9e3c-6bef049aaf3c');

INSERT INTO customer (id, email) VALUES ('42d6a42c-40c8-424d-9e3c-6bef049aaf2c', 'mathew@emial.com');
INSERT INTO users(id, name, surname, customer_id) VALUES (uuid_generate_v4(), 'Mathew', 'Perry', '42d6a42c-40c8-424d-9e3c-6bef049aaf2c');

--Orders
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d87', TO_DATE('2024-01-16','YYYY-MM-DD'), 1,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d86', TO_DATE('2024-01-17','YYYY-MM-DD'), 2,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d85', TO_DATE('2024-01-13','YYYY-MM-DD'), 0,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d84', TO_DATE('2024-01-19','YYYY-MM-DD'), 3,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('b8e45205-d417-45d7-a04f-303266954d83', TO_DATE('2024-01-20','YYYY-MM-DD'), 4,'42d6a42c-40c8-424d-9e3c-6bef049aaf6c');

--Creating orders for Rustam Orozov
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('fc0153d5-c615-43f2-a744-e45574f8a05e', TO_DATE('2024-12-16','YYYY-MM-DD'), 1,'42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('27c5dfed-a783-42f2-b1f0-92cbeef0ad53', TO_DATE('2024-11-17','YYYY-MM-DD'), 2,'42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('744c59c4-6be5-4370-a38e-da101d540084', TO_DATE('2024-01-13','YYYY-MM-DD'), 0,'42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('334a0648-198b-4669-b651-bd40cdf3f164', TO_DATE('2024-08-19','YYYY-MM-DD'), 3,'42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('4da3ca04-5a03-4fc6-9bf6-cd7d264a158e', TO_DATE('2024-03-20','YYYY-MM-DD'), 4,'42d6a42c-40c8-424d-9e3c-6bef049aaf7c');


--Creating orders for Ulubek Shakirov
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('5591a905-667e-4013-a25d-83a25847502b', TO_DATE('2024-02-01','YYYY-MM-DD'), 1, '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('765e07a0-8bb0-4953-9964-01cd91e98b7c', TO_DATE('2024-02-02','YYYY-MM-DD'), 2, '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('527f2fd4-4930-45d7-ba19-3794b8edffc4', TO_DATE('2024-02-03','YYYY-MM-DD'), 0, '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('5d270052-e8aa-4cf8-84c9-10ad936ff91f', TO_DATE('2024-02-04','YYYY-MM-DD'), 3, '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');
INSERT INTO orders(id, order_date, order_state, customer_id) VALUES ('2715d0c0-f414-436e-8f0a-a8b6c2d0cf80', TO_DATE('2024-02-05','YYYY-MM-DD'), 4, '42d6a42c-40c8-424d-9e3c-6bef049aaf5c');



--Create book
INSERT INTO publisher (id, name, phone) VALUES ('bd90362e-fddb-457d-9a1e-e191def365d2', 'publisherName', '+48792682164');
INSERT INTO book(id, category, number_of_pages, price, publish_date, title, publisher_id) VALUES(
                                                                                                    '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'Science', 375, 75, TO_DATE('2024-01-20','YYYY-MM-DD'), 'Cracking Coding Interview', 'bd90362e-fddb-457d-9a1e-e191def365d2');

--Create book for Rustam Orozov
INSERT INTO publisher (id, name, phone) VALUES ('7fad09ad-0a3f-43a6-91ac-26db5b91a52f', 'Publisher Temurka', '+48576476217');
INSERT INTO book(id, category, number_of_pages, price, publish_date, title, publisher_id) VALUES(
                                                                                                    '087cfb5e-c698-480f-8b4e-84459f9aab61', 'Romance', 375, 75, TO_DATE('2024-01-20','YYYY-MM-DD'), 'Romeo and Juliet', '7fad09ad-0a3f-43a6-91ac-26db5b91a52f');
--Creating book for Ulugbek Shakirov
INSERT INTO publisher(id, name, phone) VALUES ('28ac6b80-a2d4-4ba2-beb1-6b66372f4007', 'Random', '+9998787865');
INSERT INTO book (id, category, number_of_pages, price, publish_date, title, publisher_id) VALUES
    ('9a547682-1a67-4e6b-b7ff-74f9380aef87', 'Fiction', 320, 40, TO_DATE('2024-02-08','YYYY-MM-DD'), 'Random Adventures', '28ac6b80-a2d4-4ba2-beb1-6b66372f4007');


--Order items
ALTER TABLE order_item DROP CONSTRAINT uk_f67xlaxtwr6wwab7u7mxndi5s;

INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d87');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d86');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d85');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d84');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'b8e45205-d417-45d7-a04f-303266954d83');


--creating for Rustam Orozov
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', 'fc0153d5-c615-43f2-a744-e45574f8a05e');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', '27c5dfed-a783-42f2-b1f0-92cbeef0ad53');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', '744c59c4-6be5-4370-a38e-da101d540084');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 10, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', '334a0648-198b-4669-b651-bd40cdf3f164');
INSERT INTO order_item(id, quantity, book_id, order_id) VALUES
    (uuid_generate_v4(), 20, '42d6a42c-40c8-424d-9e3c-6bef049aaf9b', '4da3ca04-5a03-4fc6-9bf6-cd7d264a158e');


--Creating for Shakirov Ulugbek
INSERT INTO order_item (id, quantity, book_id, order_id) VALUES
    ('a94335df-8b31-42c8-91c5-935f13eea295', 5, '9a547682-1a67-4e6b-b7ff-74f9380aef87', '5591a905-667e-4013-a25d-83a25847502b');
INSERT INTO order_item (id, quantity, book_id, order_id) VALUES
    ('49f00ed9-c375-40c9-9e91-c859f0f42d31', 2, '9a547682-1a67-4e6b-b7ff-74f9380aef87', '765e07a0-8bb0-4953-9964-01cd91e98b7c');
INSERT INTO order_item (id, quantity, book_id, order_id) VALUES
    ('e8e90dcc-bd47-45ec-ad79-272601dcc160', 3, '9a547682-1a67-4e6b-b7ff-74f9380aef87', '527f2fd4-4930-45d7-ba19-3794b8edffc4');
INSERT INTO order_item (id, quantity, book_id, order_id) VALUES
    ('341cdde6-dfe4-48a6-9908-eec9849f45ae', 4, '9a547682-1a67-4e6b-b7ff-74f9380aef87', '5d270052-e8aa-4cf8-84c9-10ad936ff91f');
INSERT INTO order_item (id, quantity, book_id, order_id) VALUES
    ('ed71c5a1-8f54-4a9a-9bd6-aa878d8cb583', 1, '9a547682-1a67-4e6b-b7ff-74f9380aef87', '2715d0c0-f414-436e-8f0a-a8b6c2d0cf80');


--Creating invoice
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d87');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, 'b8e45205-d417-45d7-a04f-303266954d86');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d85');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, 'b8e45205-d417-45d7-a04f-303266954d84');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'b8e45205-d417-45d7-a04f-303266954d83');

--Creating invoice for Rustam Urazov
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, 'fc0153d5-c615-43f2-a744-e45574f8a05e');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, '27c5dfed-a783-42f2-b1f0-92cbeef0ad53');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, '744c59c4-6be5-4370-a38e-da101d540084');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 21, '334a0648-198b-4669-b651-bd40cdf3f164');
INSERT INTO invoice(id, tax_rate_in_percentage, order_id) VALUES
    (uuid_generate_v4(), 24, '4da3ca04-5a03-4fc6-9bf6-cd7d264a158e');

--Creating for Ulugbek Shakirov
INSERT INTO invoice (id, tax_rate_in_percentage, order_id) VALUES
    ('746e14de-58aa-44c2-a102-abe69b07a2f6', 20, '5591a905-667e-4013-a25d-83a25847502b');
INSERT INTO invoice (id, tax_rate_in_percentage, order_id) VALUES
    ('110449f9-ab6e-4496-ac57-c97313a9e273', 18, '765e07a0-8bb0-4953-9964-01cd91e98b7c');
INSERT INTO invoice (id, tax_rate_in_percentage, order_id) VALUES
    ('55d94e57-9a5e-4df4-82bd-1ea9b7dfa288', 19, '527f2fd4-4930-45d7-ba19-3794b8edffc4');
INSERT INTO invoice (id, tax_rate_in_percentage, order_id) VALUES
    ('59df82e4-9544-4af7-aa11-28471f363075', 17, '5d270052-e8aa-4cf8-84c9-10ad936ff91f');
INSERT INTO invoice (id, tax_rate_in_percentage, order_id) VALUES
    ('4ca29677-f40f-4a82-845a-b098a32b2bfa', 15, '2715d0c0-f414-436e-8f0a-a8b6c2d0cf80');




--Deleting customer

-- SELECT customer.id
-- FROM customer
--          JOIN users ON customer.id = users.customer_id
-- WHERE users.name = 'Rustam' AND users.surname = 'Orozov';
--
-- DELETE FROM invoice WHERE order_id IN (SELECT id FROM orders WHERE customer_id = '42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
-- DELETE FROM order_item WHERE order_id IN (SELECT id FROM orders WHERE customer_id = '42d6a42c-40c8-424d-9e3c-6bef049aaf7c');
-- DELETE FROM orders WHERE customer_id = '42d6a42c-40c8-424d-9e3c-6bef049aaf7c';
--
-- -- Delete Rustam Orozov from the users table
-- DELETE FROM users WHERE customer_id = '42d6a42c-40c8-424d-9e3c-6bef049aaf7c';
--
-- -- Delete Rustam Orozov's customer record
-- DELETE FROM customer WHERE id = '42d6a42c-40c8-424d-9e3c-6bef049aaf7c';



